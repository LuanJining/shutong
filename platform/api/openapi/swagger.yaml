basePath: /
definitions:
  handler.CreatePolicyRequest:
    properties:
      action:
        type: string
      resource:
        type: string
      role_id:
        type: string
      space_id:
        type: string
    type: object
  handler.CreateRoleRequest:
    properties:
      description:
        type: string
      name:
        type: string
      permissions:
        items:
          type: string
        type: array
    type: object
  handler.CreateSpaceRequest:
    properties:
      description:
        type: string
      name:
        type: string
    type: object
  handler.CreateUserRequest:
    properties:
      name:
        type: string
      password:
        type: string
      phone:
        type: string
      roles:
        items:
          type: string
        type: array
      spaces:
        items:
          type: string
        type: array
    type: object
  handler.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  handler.InstanceActionRequest:
    properties:
      action:
        $ref: '#/definitions/workflow.TaskAction'
      actor_id:
        type: string
      comment:
        type: string
    type: object
  handler.LoginRequest:
    properties:
      password:
        type: string
      phone:
        type: string
    type: object
  handler.LoginResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/iam.User'
    type: object
  handler.RegisterFlowRequest:
    properties:
      code:
        type: string
      description:
        type: string
      name:
        type: string
      nodes:
        items:
          $ref: '#/definitions/workflow.FlowNode'
        type: array
    type: object
  handler.StartInstanceRequest:
    properties:
      business_id:
        type: string
      created_by:
        type: string
      space_id:
        type: string
    type: object
  handler.UpdateUserRequest:
    properties:
      name:
        type: string
      password:
        type: string
      phone:
        type: string
      roles:
        items:
          type: string
        type: array
      spaces:
        items:
          type: string
        type: array
    type: object
  handler.WFErrorResponse:
    properties:
      error:
        type: string
    type: object
  iam.Policy:
    properties:
      action:
        type: string
      created_at:
        type: string
      id:
        type: string
      resource:
        type: string
      role_id:
        type: string
      space_id:
        type: string
    type: object
  iam.Role:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      permissions:
        items:
          type: string
        type: array
      updated_at:
        type: string
    type: object
  iam.Space:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  iam.User:
    properties:
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      phone:
        type: string
      roles:
        items:
          type: string
        type: array
      spaces:
        items:
          type: string
        type: array
      updated_at:
        type: string
    type: object
  workflow.FlowDefinition:
    properties:
      code:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      nodes:
        items:
          $ref: '#/definitions/workflow.FlowNode'
        type: array
      updated_at:
        type: string
    type: object
  workflow.FlowInstance:
    properties:
      business_id:
        type: string
      completed_at:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      current_node_id:
        type: string
      definition_id:
        type: string
      history:
        items:
          $ref: '#/definitions/workflow.InstanceAction'
        type: array
      id:
        type: string
      space_id:
        type: string
      status:
        $ref: '#/definitions/workflow.InstanceStatus'
      updated_at:
        type: string
    type: object
  workflow.FlowNode:
    properties:
      approver_role:
        type: string
      id:
        type: string
      name:
        type: string
      next_node_id:
        type: string
      type:
        $ref: '#/definitions/workflow.FlowNodeType'
    type: object
  workflow.FlowNodeType:
    enum:
    - approval
    - auto
    type: string
    x-enum-varnames:
    - NodeTypeApproval
    - NodeTypeAuto
  workflow.InstanceAction:
    properties:
      action:
        $ref: '#/definitions/workflow.TaskAction'
      actor_id:
        type: string
      comment:
        type: string
      created_at:
        type: string
      id:
        type: string
      instance_id:
        type: string
      node_id:
        type: string
    type: object
  workflow.InstanceStatus:
    enum:
    - pending
    - approved
    - rejected
    type: string
    x-enum-varnames:
    - StatusPending
    - StatusApproved
    - StatusRejected
  workflow.TaskAction:
    enum:
    - approve
    - reject
    type: string
    x-enum-varnames:
    - ActionApprove
    - ActionReject
info:
  contact: {}
  description: Account and permission management endpoints for the knowledge base.
  title: Knowledge Base IAM Service API
  version: 0.1.0
paths:
  /api/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate with phone and password to receive JWT.
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Obtain JWT token
      tags:
      - Auth
  /api/flows:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/workflow.FlowDefinition'
            type: array
      security:
      - BearerAuth: []
      summary: List workflow definitions
      tags:
      - Definitions
    post:
      consumes:
      - application/json
      parameters:
      - description: Definition payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.RegisterFlowRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/workflow.FlowDefinition'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.WFErrorResponse'
      security:
      - BearerAuth: []
      summary: Register workflow definition
      tags:
      - Definitions
  /api/flows/{code}/instances:
    post:
      consumes:
      - application/json
      parameters:
      - description: Definition code
        in: path
        name: code
        required: true
        type: string
      - description: Instance payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.StartInstanceRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/workflow.FlowInstance'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.WFErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.WFErrorResponse'
      security:
      - BearerAuth: []
      summary: Start workflow instance
      tags:
      - Instances
  /api/instances/{id}:
    get:
      parameters:
      - description: Instance ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/workflow.FlowInstance'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.WFErrorResponse'
      security:
      - BearerAuth: []
      summary: Get workflow instance
      tags:
      - Instances
  /api/instances/{id}/actions:
    post:
      consumes:
      - application/json
      parameters:
      - description: Instance ID
        in: path
        name: id
        required: true
        type: string
      - description: Action payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.InstanceActionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/workflow.FlowInstance'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.WFErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.WFErrorResponse'
      security:
      - BearerAuth: []
      summary: Submit action on workflow instance
      tags:
      - Instances
  /api/policies:
    post:
      consumes:
      - application/json
      parameters:
      - description: Create policy
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.CreatePolicyRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/iam.Policy'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create policy
      tags:
      - Policies
  /api/policies/{spaceId}:
    get:
      parameters:
      - description: Space ID
        in: path
        name: spaceId
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/iam.Policy'
            type: array
      security:
      - BearerAuth: []
      summary: List policies for a space
      tags:
      - Policies
  /api/roles:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/iam.Role'
            type: array
      security:
      - BearerAuth: []
      summary: List roles
      tags:
      - Roles
    post:
      consumes:
      - application/json
      parameters:
      - description: Create role
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.CreateRoleRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/iam.Role'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create role
      tags:
      - Roles
  /api/roles/{id}:
    delete:
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete role
      tags:
      - Roles
  /api/spaces:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/iam.Space'
            type: array
      security:
      - BearerAuth: []
      summary: List spaces
      tags:
      - Spaces
    post:
      consumes:
      - application/json
      parameters:
      - description: Create space
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.CreateSpaceRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/iam.Space'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create space
      tags:
      - Spaces
  /api/spaces/{id}:
    delete:
      parameters:
      - description: Space ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete space
      tags:
      - Spaces
  /api/users:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/iam.User'
            type: array
      security:
      - BearerAuth: []
      summary: List users
      tags:
      - Users
    post:
      consumes:
      - application/json
      parameters:
      - description: Create user
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/iam.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create user
      tags:
      - Users
  /api/users/{id}:
    delete:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - Users
    patch:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Update payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/iam.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user
      tags:
      - Users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
